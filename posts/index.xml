<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Aniki's Blog</title><link>https://whitewolf2000ani.github.io/AnikiBlogs/posts/</link><description>Recent content in Posts on Aniki's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://whitewolf2000ani.github.io/AnikiBlogs/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Obsidian Notes -> Blogs</title><link>https://whitewolf2000ani.github.io/AnikiBlogs/posts/blogs/my-blogging-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://whitewolf2000ani.github.io/AnikiBlogs/posts/blogs/my-blogging-setup/</guid><description>Why am I doing this? A Repository or a store for whatever cool concepts I study/Understand. It&amp;rsquo;s really important to learn in Public. How am I doing this? Obsidian https://obsidian.md/ Hugo for building the static website blazingly fast. Why are we using HUGO? The simple answer is HUGO converts Markdown files to Website code directly(Isn&amp;rsquo;t this convenientüòÅ)
Prerequisites for Hugo Git -&amp;gt; Install According to Operating System.</description><content>&lt;h2 id="why-am-i-doing-this">Why am I doing this?&lt;/h2>
&lt;ul>
&lt;li>A Repository or a store for whatever cool concepts I study/Understand.&lt;/li>
&lt;li>It&amp;rsquo;s really important to learn in Public.&lt;/li>
&lt;/ul>
&lt;h2 id="how-am-i-doing-this">How am I doing this?&lt;/h2>
&lt;ul>
&lt;li>Obsidian &lt;a href="https://obsidian.md/">https://obsidian.md/&lt;/a>&lt;/li>
&lt;li>&lt;img src="https://whitewolf2000ani.github.io/AnikiBlogs/images/Pasted_image_20241203121609.png" alt="Image Description">&lt;/li>
&lt;li>Hugo for building the static website blazingly fast.&lt;/li>
&lt;/ul>
&lt;h2 id="why-are-we-using-hugo">Why are we using HUGO?&lt;/h2>
&lt;p>The simple answer is HUGO converts Markdown files to Website code directly(Isn&amp;rsquo;t this convenientüòÅ)&lt;/p>
&lt;ul>
&lt;li>Prerequisites for Hugo
&lt;ul>
&lt;li>Git -&amp;gt; Install According to Operating System.
&lt;ul>
&lt;li>Prompt: How do Install Git in &amp;ldquo;Operating System&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Go -&amp;gt; Install According to Operating System.
&lt;ul>
&lt;li>Prompt: How to Install Go in &amp;ldquo;Operating system&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Install HUGO following the official documentation &lt;a href="https://gohugo.io/installation/linux/">https://gohugo.io/installation/linux/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="the-next-steps">The next Steps&lt;/h2>
&lt;ul>
&lt;li>Create a Folder for your blogs.&lt;/li>
&lt;li>Move into that folder and use command&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">hugo new site &amp;lt;NameOfSite&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>The required files for HUGO will be created.&lt;/li>
&lt;li>Initialize a Git repository&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">git init
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Choose a exciting theme of choice. -&amp;gt; &lt;a href="https://themes.gohugo.io/">https://themes.gohugo.io/&lt;/a>
&lt;ul>
&lt;li>After choosing a theme, -&amp;gt; &lt;a href="https://themes.gohugo.io/themes/hugo-theme-terminal/">https://themes.gohugo.io/themes/hugo-theme-terminal/&lt;/a>&lt;/li>
&lt;li>Find &amp;ldquo;Install theme as submodule&amp;rdquo; this is the easiest and best way to use the Theme.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">//similar to this command
git submodule add -f https://github.com/panr/hugo-theme-terminal.git themes/terminal
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>We need to configure the &amp;ldquo;config.toml&amp;rdquo; file in order to render the theme (e.g. Config file for terminal theme)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-config.toml" data-lang="config.toml">
&lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#a6e22e">Example&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span> &lt;span style="color:#a6e22e">terminal&lt;/span> &lt;span style="color:#a6e22e">theme&lt;/span>
&lt;span style="color:#a6e22e">baseurl&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">languageCode&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;en-us&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Add it only if you keep the theme in the `themes` directory. &lt;/span>
&lt;span style="color:#75715e"># Remove it if you use the theme as a remote Hugo Module. &lt;/span>
&lt;span style="color:#a6e22e">theme&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;terminal&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">paginate&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span>
[&lt;span style="color:#a6e22e">params&lt;/span>]
&lt;span style="color:#75715e"># dir name of your main content (default is `content/posts`). &lt;/span>
&lt;span style="color:#75715e"># the list of set content will show up on your index page (baseurl). &lt;/span>
&lt;span style="color:#a6e22e">contentTypeName&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;posts&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># if you set this to 0, only submenu trigger will be visible &lt;/span>
&lt;span style="color:#a6e22e">showMenuItems&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># show selector to switch language &lt;/span>
&lt;span style="color:#a6e22e">showLanguageSelector&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># set theme to full screen width &lt;/span>
&lt;span style="color:#a6e22e">fullWidthTheme&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># center theme with default width &lt;/span>
&lt;span style="color:#a6e22e">centerTheme&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># if your resource directory contains an image called `cover.(jpg|png|webp)`, &lt;/span>
&lt;span style="color:#75715e"># then the file will be used as a cover automatically. &lt;/span>
&lt;span style="color:#75715e"># With this option you don&amp;#39;t have to put the `cover` param in a front-matter. &lt;/span>
&lt;span style="color:#a6e22e">autoCover&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># set post to show the last updated # If you use git, you can set `enableGitInfo` to `true` and then post will automatically get the last updated &lt;/span>
&lt;span style="color:#a6e22e">showLastUpdated&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># Provide a string as a prefix for the last update date. By default, it looks like this: 2020-xx-xx [Updated: 2020-xx-xx] :: Author &lt;/span>
&lt;span style="color:#75715e"># updatedDatePrefix = &amp;#34;Updated&amp;#34; # whether to show a page&amp;#39;s estimated reading time # readingTime = false # default &lt;/span>
&lt;span style="color:#75715e"># whether to show a table of contents &lt;/span>
&lt;span style="color:#75715e"># can be overridden in a page&amp;#39;s front-matter &lt;/span>
&lt;span style="color:#75715e"># Toc = false # default &lt;/span>
&lt;span style="color:#75715e"># set title for the table of contents &lt;/span>
&lt;span style="color:#75715e"># can be overridden in a page&amp;#39;s front-matter &lt;/span>
&lt;span style="color:#75715e"># TocTitle = &amp;#34;Table of Contents&amp;#34; &lt;/span>
&lt;span style="color:#75715e"># default [params.twitter] &lt;/span>
&lt;span style="color:#75715e"># set Twitter handles for Twitter cards &lt;/span>
&lt;span style="color:#75715e"># see https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started#card-and-content-attribution &lt;/span>
&lt;span style="color:#75715e"># do not include &lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#a6e22e">creator&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">site&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
[&lt;span style="color:#a6e22e">languages&lt;/span>]
[&lt;span style="color:#a6e22e">languages&lt;/span>.&lt;span style="color:#a6e22e">en&lt;/span>]
&lt;span style="color:#a6e22e">languageName&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;English&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">title&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Terminal&amp;#34;&lt;/span>
[&lt;span style="color:#a6e22e">languages&lt;/span>.&lt;span style="color:#a6e22e">en&lt;/span>.&lt;span style="color:#a6e22e">params&lt;/span>]
&lt;span style="color:#a6e22e">subtitle&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;A simple, retro theme for Hugo&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">owner&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">keywords&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">copyright&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">menuMore&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Show more&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">readMore&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Read more&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">readOtherPosts&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Read other posts&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">newerPosts&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Newer posts&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">olderPosts&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Older posts&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">missingContentMessage&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Page not found...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">missingBackButtonLabel&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Back to home page&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">minuteReadingTime&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;min read&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">words&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;words&amp;#34;&lt;/span>
[&lt;span style="color:#a6e22e">languages&lt;/span>.&lt;span style="color:#a6e22e">en&lt;/span>.&lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">logo&lt;/span>]
&lt;span style="color:#a6e22e">logoText&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Terminal&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">logoHomeLink&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
[&lt;span style="color:#a6e22e">languages&lt;/span>.&lt;span style="color:#a6e22e">en&lt;/span>.&lt;span style="color:#a6e22e">menu&lt;/span>]
[[&lt;span style="color:#a6e22e">languages&lt;/span>.&lt;span style="color:#a6e22e">en&lt;/span>.&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;span style="color:#a6e22e">identifier&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;about&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;About&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/about&amp;#34;&lt;/span>
[[&lt;span style="color:#a6e22e">languages&lt;/span>.&lt;span style="color:#a6e22e">en&lt;/span>.&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;span style="color:#a6e22e">identifier&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;showcase&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Showcase&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/showcase&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>After this a simple command of&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">hugo server -t &amp;lt;themename&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="now-lets-see-some-text-rendering-">Now lets see some text rendering? üñãÔ∏è&lt;/h2>
&lt;ul>
&lt;li>But there seems to be problemüòê, the obsidian blog folder and our hugo blog folder are in different locations.&lt;/li>
&lt;li>The content in them should sync simultaneously.&lt;/li>
&lt;li>We will solve this problem using a very specific command both in linux and Windows.&lt;/li>
&lt;/ul>
&lt;p>linux&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">rsync -av --delete &amp;quot;sourcepath&amp;quot; &amp;quot;destinationpath&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Windows&lt;/p>
&lt;pre tabindex="0">&lt;code>robocopy sourcepath destination path /mir
&lt;/code>&lt;/pre>&lt;h2 id="now-lets-render-the-images">Now lets render the images&lt;/h2>
&lt;ul>
&lt;li>One more problem that we see here is the rendering of images.&lt;/li>
&lt;li>The problem arises because obsidian keeps a different attachments folder for media.&lt;/li>
&lt;li>Now we need to copy the images used in our blog to the Hugo codebase.&lt;/li>
&lt;li>So we will use a python script to copy all the used images from the attachments folder to folder inside static/images/&lt;/li>
&lt;li>Use this python script naming it as images.py and run it to see the magicüòÅ.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Python" data-lang="Python">&lt;span style="color:#f92672">import&lt;/span> os
&lt;span style="color:#f92672">import&lt;/span> re
&lt;span style="color:#f92672">import&lt;/span> shutil
&lt;span style="color:#75715e"># Paths&lt;/span>
posts_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;Blog.md Destination inside&amp;gt;&amp;#34;&lt;/span>
attachments_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;Path where obsidian stores its images&amp;gt;&amp;#34;&lt;/span>
static_images_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;Path of static/images directory where you want to copy your images&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Base URL for Hugo&lt;/span>
baseURL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://whitewolf2000ani.github.io/AnikiBlogs&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Ensure static images directory exists&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(static_images_dir):
¬† ¬† os&lt;span style="color:#f92672">.&lt;/span>makedirs(static_images_dir)
&lt;span style="color:#75715e"># Function to normalize image names (replace spaces with underscores)&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">normalize_image_name&lt;/span>(image_name):
¬† ¬† &lt;span style="color:#66d9ef">return&lt;/span> image_name&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span>)
¬† ¬†
&lt;span style="color:#75715e"># Process each Markdown file in the posts directory&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> filename &lt;span style="color:#f92672">in&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>listdir(posts_dir):
¬† ¬† &lt;span style="color:#66d9ef">if&lt;/span> filename&lt;span style="color:#f92672">.&lt;/span>endswith(&lt;span style="color:#e6db74">&amp;#34;.md&amp;#34;&lt;/span>):
¬† ¬† ¬† ¬† filepath &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(posts_dir, filename)
¬† ¬† ¬† ¬† &lt;span style="color:#66d9ef">with&lt;/span> open(filepath, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> file:
¬† ¬† ¬† ¬† ¬† ¬† content &lt;span style="color:#f92672">=&lt;/span> file&lt;span style="color:#f92672">.&lt;/span>read()
¬† ¬† ¬† ¬† ¬† ¬†
¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Find all image links in the format `![[filename.extension]]`&lt;/span>
¬† ¬† ¬† ¬† images &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>findall(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;!\[\[([^]]+\.(?:png|jpg|jpeg|gif|webp))\]\]&amp;#34;&lt;/span>, content)
¬† ¬† ¬† ¬† &lt;span style="color:#66d9ef">for&lt;/span> image &lt;span style="color:#f92672">in&lt;/span> images:
¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Normalize the image filename&lt;/span>
¬† ¬† ¬† ¬† ¬† ¬† normalized_image_name &lt;span style="color:#f92672">=&lt;/span> normalize_image_name(image)
¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Original and normalized filenames&lt;/span>
¬† ¬† ¬† ¬† ¬† ¬† image_with_spaces &lt;span style="color:#f92672">=&lt;/span> image
¬† ¬† ¬† ¬† ¬† ¬† image_with_encoded_spaces &lt;span style="color:#f92672">=&lt;/span> normalized_image_name
¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Path to the original image&lt;/span>
¬† ¬† ¬† ¬† ¬† ¬† image_source &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(attachments_dir, image_with_spaces)
¬† ¬† ¬† ¬† ¬† ¬† print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Checking for image: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>image_source&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Replace Markdown link with a Hugo-compatible link&lt;/span>
¬† ¬† ¬† ¬† ¬† ¬† new_image_link &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;![Image Description](&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>baseURL&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/images/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>image_with_encoded_spaces&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span>
¬† ¬† ¬† ¬† ¬† ¬† content &lt;span style="color:#f92672">=&lt;/span> content&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;![[&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>image_with_spaces&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">]]&amp;#34;&lt;/span>, new_image_link)
¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Copy the image to the static directory if it exists&lt;/span>
¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#66d9ef">if&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(image_source):
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Copy the image to the static directory with a normalized name&lt;/span>
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† shutil&lt;span style="color:#f92672">.&lt;/span>copy(image_source, os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(static_images_dir, normalized_image_name))
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Copied: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>image_source&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> -&amp;gt; &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>static_images_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>normalized_image_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
¬† ¬† ¬† ¬† ¬† ¬† &lt;span style="color:#66d9ef">else&lt;/span>:
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Image not found: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>image_source&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†
¬† ¬† ¬† ¬† &lt;span style="color:#75715e"># Write updated content back to the file&lt;/span>
¬† ¬† ¬† ¬† &lt;span style="color:#66d9ef">with&lt;/span> open(filepath, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> file:
¬† ¬† ¬† ¬† ¬† ¬† file&lt;span style="color:#f92672">.&lt;/span>write(content)
print(&lt;span style="color:#e6db74">&amp;#34;Markdown files processed and images copied successfully.&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>After using the below script run.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">python3 images.py
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>This will copy all the images used in the current blog to the images folder inside static.
&lt;img src="https://whitewolf2000ani.github.io/AnikiBlogs/images/Pasted_image_20241203173907.png" alt="Image Description">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After the images are copied.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run the file syncing command.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start the Hugo server.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Whoosh the image has been rendered on our localhost.
&lt;img src="https://whitewolf2000ani.github.io/AnikiBlogs/images/Pasted_image_20241203181859.png" alt="Image Description">&lt;/p>
&lt;h2 id="do-we-always-have-to-run-the-sync-command-and-then-copy-the-images">Do we always have to run the sync command and then copy the images?&lt;/h2>
&lt;ul>
&lt;li>The simple answer is yes, but we will automate the entire task using a python script at the end of the blog.&lt;/li>
&lt;/ul>
&lt;h2 id="now-lets-put-this-out-in-the-openpun-intended">Now let&amp;rsquo;s put this out in the open(Pun intended)üòÅ&lt;/h2>
&lt;ul>
&lt;li>Remember the &amp;ldquo;git init&amp;rdquo; command we used to initialize a git repository, now we will use the local repo.&lt;/li>
&lt;li>Step 1: Go to &lt;a href="http://www.github.com">www.github.com&lt;/a>&lt;/li>
&lt;li>Step 2: Create a new repository.&lt;/li>
&lt;li>step 3: Connect the local repository to your remote repository.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">git remote add origin &amp;lt;/ssh /https link&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>step 4: Run Hugo to create all the necessary changes.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">hugo
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Step 5: Now add all the changes made.&lt;/li>
&lt;li>Step 6: Commit these changes with a valid comment.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">git add.
git commit -m &amp;quot;My, first commit to the blog&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Step 7: Push these changes to GitHub/ remote.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>git push -u origin master
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Now we will see the changes in our Remote GitHub Repository(or simply on the GitHub Website).&lt;/li>
&lt;/ul>
&lt;h2 id="now-the-moment-of-truth-where-should-we-host-our-website-">Now the moment of Truth, where should we host our website ü§î?&lt;/h2>
&lt;ul>
&lt;li>Vercel/ GitHub pages/ Hostinger.&lt;/li>
&lt;li>I will be using GitHub pages.
&lt;ul>
&lt;li>It&amp;rsquo;s good for static websites.&lt;/li>
&lt;li>It&amp;rsquo;s free üòç.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Let&amp;rsquo;s do it.&lt;/li>
&lt;li>Step 1: We are creating a separate branch for deploying the Blog.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">git checkout --orphan gh-pages
git rm -rf .
echo &amp;quot;This is the gh-pages branch&amp;quot; &amp;gt; README.md
git add README.md
git commit -m &amp;quot;Initialize gh-pages branch&amp;quot;
git push origin gh-pages
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Step 2: Configure GitHub pages.
&lt;ul>
&lt;li>Inside your blogs repository there is click on the settings icon.&lt;/li>
&lt;li>Navigate to the Code and Automation Section.&lt;/li>
&lt;li>Click on Actions.&lt;/li>
&lt;li>Click on General.
&lt;img src="https://whitewolf2000ani.github.io/AnikiBlogs/images/Pasted_image_20241204215856.png" alt="Image Description">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Under the Workflow permissions-&amp;gt; click on Read and Write permissions.&lt;/li>
&lt;li>Step 3: Under the Pages section set the source to gh-pages branch and /root directory.&lt;/li>
&lt;li>Step 4: Now checkout to the master branch&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">git checkout master
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Step 5: Create the &lt;code>.github/workflows/deploy.yml&lt;/code> file with the deployment instructions.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-deploy.yml" data-lang="deploy.yml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy Hugo to GitHub Pages&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">master &lt;/span> &lt;span style="color:#75715e"># Your main branch name&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout code&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># Fetch submodules if any&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install Hugo&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> wget https://github.com/gohugoio/hugo/releases/download/v0.92.2/hugo_extended_0.92.2_Linux-64bit.tar.gz
&lt;/span>&lt;span style="color:#e6db74"> tar -xzf hugo_extended_0.92.2_Linux-64bit.tar.gz -C /usr/local/bin&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build site&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy to gh-pages&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">github_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Use the corrected &lt;code>master&lt;/code> branch for your main branch and &lt;code>gh-pages&lt;/code> for deployment.&lt;/li>
&lt;li>Step 6: Ensure your &lt;code>hugo&lt;/code> configuration points to the correct &lt;code>baseURL&lt;/code> in &lt;code>config.toml&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-config.toml" data-lang="config.toml">&lt;span style="color:#a6e22e">baseURL&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://&amp;lt;username&amp;gt;.github.io/&amp;lt;repo-name&amp;gt;/&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Step 7: Run these commands below to start the workflow now.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-Terminal" data-lang="Terminal">hugo
git add .
git commit -m &amp;quot;Add GitHub Pages deployment workflow&amp;quot;
git push origin master
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Step 8: Take a breather till the actions are getting completed.&lt;/li>
&lt;li>Step 9: After the actions are completed go the same settings/ pages option and open the deployment link.(As the link you are using to read the blog)&lt;/li>
&lt;li>Step 10: Here you go your Blog site is up and running for everyone to see.üòç&lt;/li>
&lt;/ul>
&lt;h2 id="lets-summarize">Let&amp;rsquo;s Summarize&lt;/h2>
&lt;ul>
&lt;li>We write our content inside Obsidian.&lt;/li>
&lt;li>Copy this .md file into our Blogs directory using rsync/robocopy&lt;/li>
&lt;li>We create a copy of the images used in our blog to the &lt;code>static/images&lt;/code> folder using &lt;code>images.py&lt;/code>&lt;/li>
&lt;li>Now we push it to our master branch after which the &lt;code>deployment.yml&lt;/code> deploys it to our GitHub page using the &lt;code>gh-pg&lt;/code> branch.&lt;br>
Ughh the process seems so cumbersome ü§î.&lt;/li>
&lt;/ul>
&lt;h2 id="the-ultimate-python-script-for-one-command-notes--blog">The Ultimate python script for one command notes-&amp;gt; blog&lt;/h2>
&lt;ul>
&lt;li>Save the script with &lt;code>.sh&lt;/code> extension&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>set -euo pipefail
&lt;span style="color:#75715e"># Change to the script&amp;#39;s directory&lt;/span>
SCRIPT_DIR&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>dirname &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>BASH_SOURCE[0]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$SCRIPT_DIR&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Set variables for Obsidian to Hugo copy&lt;/span>
sourcePath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;source in obsidian&amp;gt;&amp;#34;&lt;/span>
destinationPath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;Destination inside hugo content/blogs&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Set GitHub Repo&lt;/span>
myrepo&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;reponame&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Check for required commands&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> cmd in git rsync python3 hugo; &lt;span style="color:#66d9ef">do&lt;/span>
¬† ¬† &lt;span style="color:#66d9ef">if&lt;/span> ! command -v $cmd &amp;amp;&amp;gt; /dev/null; &lt;span style="color:#66d9ef">then&lt;/span>
¬†¬† ¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$cmd&lt;span style="color:#e6db74"> is not installed or not in PATH.&amp;#34;&lt;/span>
¬† ¬† ¬† ¬† exit &lt;span style="color:#ae81ff">1&lt;/span>
¬† ¬† &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#75715e"># Step 1: Check if Git is initialized, and initialize if necessary&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> ! git remote | grep -q &lt;span style="color:#e6db74">&amp;#39;origin&amp;#39;&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† git remote add origin &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$myrepo&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Remote &amp;#39;origin&amp;#39; added.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Remote &amp;#39;origin&amp;#39; already exists.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># Step 2: Sync posts from Obsidian to Hugo content folder using rsync&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Syncing posts from Obsidian...&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$sourcePath&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Source path does not exist: &lt;/span>$sourcePath&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
¬† ¬† exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$destinationPath&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Destination path does not exist: &lt;/span>$destinationPath&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
¬† ¬† exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
rsync -av --delete &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$sourcePath&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$destinationPath&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Step 3: Process Markdown files with Python script to handle image links&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Processing image links in Markdown files...&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -f &lt;span style="color:#e6db74">&amp;#34;images.py&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Python script images.py not found.&amp;#34;&lt;/span>
¬† ¬† exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> ! python3 images.py; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Failed to process image links.&amp;#34;&lt;/span>
¬† ¬† exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># Step 4: Build the Hugo site&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Building the Hugo site...&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> ! hugo; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Hugo build failed.&amp;#34;&lt;/span>
¬† ¬† exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># Step 5: Add changes to Git&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Staging changes for Git...&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> git diff --quiet &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> git diff --cached --quiet; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;No changes to stage.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
¬† ¬† git add .
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># Step 6: Commit changes with a dynamic message&lt;/span>
commit_message&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;New Blog Post on &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>date +&lt;span style="color:#e6db74">&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> git diff --cached --quiet; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;No changes to commit.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Committing changes...&amp;#34;&lt;/span>
¬† ¬† git commit -S -m &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$commit_message&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># Step 7: Push all changes to the main branch&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Deploying to GitHub Master...&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> ! git push origin master; &lt;span style="color:#66d9ef">then&lt;/span>
¬† ¬† echo &lt;span style="color:#e6db74">&amp;#34;Failed to push to master branch.&amp;#34;&lt;/span>
¬† ¬† exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;All done! Site synced, processed, committed, built, and deployed.&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Gives your script execution permission.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>chmmod +x updateblog.sh
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Now lets run the scipt.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>bash updateblog.sh
&lt;/code>&lt;/pre>&lt;h2 id="finally">Finally&lt;/h2>
&lt;ul>
&lt;li>Just make changes to your blog, add more blogs&lt;/li>
&lt;li>go to your terminal, run the magic command &lt;code>bash updateblog.sh&lt;/code>&lt;/li>
&lt;li>That directly puts out your content to the GitHub pages.&lt;/li>
&lt;li>Credits: Network Chuck(&lt;a href="https://youtu.be/dnE7c0ELEH8?si=ctH_oufnQeyGmUkn">https://youtu.be/dnE7c0ELEH8?si=ctH_oufnQeyGmUkn&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h2 id="be-tuned-for-more-blogs-">Be Tuned for more blogs ü§ó.&lt;/h2></content></item></channel></rss>